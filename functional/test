#!/bin/bash -e

function print_results() {
  total=$(grep -E '^--- (:?PASS|SKIP|FAIL)' functional/functional-tests.log | wc -l)
  pass=$(grep '^--- PASS' functional/functional-tests.log | wc -l)
  skip=$(grep '^--- SKIP' functional/functional-tests.log | wc -l)
  fail=$(grep '^--- FAIL' functional/functional-tests.log | wc -l)
  smoke_logs=$(awk '/Test.*_smoke.*\.log/{print $NF}' functional/functional-tests.log)

  if [ "x$smoke_logs" != "x" ]; then
    echo
    echo "==========================================================="
    echo "Functional test debug logs"
    echo "==========================================================="
  fi

  for smoke_log in $smoke_logs; do
    echo "# Printing last $TAIL_LOGS of $smoke_log (systemd)"
    grep 'systemd\[1\]' $smoke_log | tail -$TAIL_LOGS
    echo "# Printing last $TAIL_LOGS of $smoke_log (fleetd)"
    grep 'fleetd\[.*\]' $smoke_log | tail -$TAIL_LOGS
    echo "# Printing last $TAIL_LOGS of $smoke_log excluding fleetd/systemd/sshd"
    grep -vE 'fleetd\[.*\]|systemd\[1\]|sshd\[.*\]' $smoke_log | tail -$TAIL_LOGS
    echo "==========================================================="
  done

  echo ""
  grep -E '^--- (:?PASS|FAIL|SKIP)' functional/functional-tests.log

  echo "==========================================================="
  echo "Functional test summary"
  echo "==========================================================="
  echo "# TOTAL: $total"
  echo "# PASS: $pass"
  echo "# SKIP: $skip"
  echo "# FAIL: $fail"
  echo ""
  echo "See ${CDIR}/functional/functional-tests.log for the detailed output."
  if [ "${TESTS_RETURN_CODE_1}" -ne "0" ]; then
    exit ${TESTS_RETURN_CODE_1}
  else
    exit ${TESTS_RETURN_CODE_2}
  fi
}

CDIR=$(cd `dirname "$0"`/.. && pwd)
USER_ID=${SUDO_UID:-$(id -u)}
HOME=$(getent passwd "${USER_ID}" | cut -d: -f6)
TAIL_LOGS=30

cd ${CDIR}
export GOROOT=${HOME}/go
export PATH=${HOME}/go/bin:${PATH}

if [ ! -S "${SSH_AUTH_SOCK}" ]; then
  eval $(ssh-agent)
  trap "ssh-agent -k > /dev/null" EXIT
fi

# github doesn't support explicit file permission set, this is workaround
chmod 0600 functional/fixtures/id_rsa
ssh-add functional/fixtures/id_rsa

if [[ ! $(go version 2>/dev/null) ]]; then
  functional/provision/install_go.sh
fi

source build-env
eval $(go env)

if [ ! -x "bin/fleetd" ] || \
   [ ! -x "bin/fleetctl" ] || \
   [ ! $(bin/fleetctl | grep "${VERSION}") ]; then
  ./build
fi

# Parameters to be passed to "go test" must contain either "--tags=all" for
# normal tests, or "--tags=dummytest" for a dummy test that just sets up
# test clusters, without running any tests. As "go test" does not accept
# multiple "--tags" options, we need to parse the option to pass the option
# only once.
INPUT_PARAMS="$@"
if [[ ${INPUT_PARAMS} =~ "-tags"[+([:space:])=]"dummy" ]]; then
  TEST_PARAMS="-v ${INPUT_PARAMS}"
else
  INPUT_PARAMS="${INPUT_PARAMS##?(-)-tags[+([:space:])=]+([[:alnum:]])}"
  INPUT_PARAMS="${INPUT_PARAMS%%?(-)-tags[+([:space:])=]+([[:alnum:]])}"
  TEST_PARAMS="-v --tags=all ${INPUT_PARAMS}"
fi

# Phase 1: run tests with gRPC disabled
export FLEETD_TEST_ENV="enable_grpc=false"
go test github.com/coreos/fleet/functional --ldflags "${GLDFLAGS}" ${TEST_PARAMS} 2>&1 | \
  sed -u -r "s/^(---\s+(:?PASS|SKIP|FAIL):\s+Test[^\(]*)/\\1(fleet.conf=\[$FLEETD_TEST_ENV\]) /g;s/^(=== RUN\s+Test.*)/\1 (fleet.conf=\[$FLEETD_TEST_ENV\])/g" | \
  tee -a functional/functional-tests.log

TESTS_RETURN_CODE_1=${PIPESTATUS[0]}

# Phase 2: run tests with gRPC enabled
export FLEETD_TEST_ENV="enable_grpc=true"
go test github.com/coreos/fleet/functional --ldflags "${GLDFLAGS}" ${TEST_PARAMS} 2>&1 | \
  sed -u -r "s/^(---\s+(:?PASS|SKIP|FAIL):\s+Test[^\(]*)/\\1(fleet.conf=\[$FLEETD_TEST_ENV\]) /g;s/^(=== RUN\s+Test.*)/\1 (fleet.conf=\[$FLEETD_TEST_ENV\])/g" | \
  tee -a functional/functional-tests.log

TESTS_RETURN_CODE_2=${PIPESTATUS[0]}

print_results
