package registry

import (
	"path"

	"github.com/coreos/fleet/sign"
)

const (
	signingPrefix = "/signing/"
)

// CreateSignatureSet stores the given SignatureSet in the repository
func (r *FleetRegistry) CreateSignatureSet(ss *sign.SignatureSet) error {
	key := r.signatureSetPath(ss.Tag)
	json, _ := marshal(ss)
	_, err := r.storage.Create(key, json, 0)
	return err
}

// DestroySignatureSet destroys the SignatureSet associated with the given tag
func (r *FleetRegistry) DestroySignatureSet(tag string) {
	key := r.signatureSetPath(tag)
	r.storage.Delete(key, false)
}

// GetSignatureSet returns the SignatureSet associated with the given tag
func (r *FleetRegistry) GetSignatureSet(tag string) *sign.SignatureSet {
	key := r.signatureSetPath(tag)
	resp, err := r.storage.Get(key, false, true)

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return nil
	}

	var sig sign.SignatureSet
	//TODO: Handle the error generated by unmarshal
	unmarshal(resp.Node.Value, &sig)

	return &sig
}

// GetSignatureSetOfJob retrieves the SignatureSet associated with the given
// job, or nil if none can be found
func (r *FleetRegistry) GetSignatureSetOfJob(name string) *sign.SignatureSet {
	return r.GetSignatureSet(sign.TagForJob(name))
}

func (r *FleetRegistry) destroySignatureSetOfJob(name string) {
	r.DestroySignatureSet(sign.TagForJob(name))
}

func (r *FleetRegistry) signatureSetPath(s string) string {
	return path.Join(r.keyPrefix, signingPrefix, s)
}
