package registry

import (
	"path"
	"time"

	etcderr "github.com/coreos/fleet/third_party/github.com/coreos/etcd/error"
	"github.com/coreos/fleet/third_party/github.com/coreos/go-etcd/etcd"

	"github.com/coreos/fleet/event"
	"github.com/coreos/fleet/machine"
)

const (
	machinePrefix     = "/machines/"
	machineSpecPrefix = "/machineSpecs"
)

// Describe all active Machines
func (r *Registry) GetActiveMachines() []machine.MachineState {
	key := path.Join(keyPrefix, machinePrefix)
	resp, err := r.etcd.Get(key, false, true)

	var machines []machine.MachineState

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return machines
	}

	for _, kv := range resp.Node.Nodes {
		_, bootID := path.Split(kv.Key)
		mach := r.GetMachineState(bootID)
		if mach != nil {
			machines = append(machines, *mach)
		}
	}

	return machines
}

func (r *Registry) GetMachineSpecs() (map[string]machine.MachineSpec, error) {
	key := path.Join(keyPrefix, machineSpecPrefix)
	resp, err := r.etcd.Get(key, false, true)
	if err != nil {
		switch terr := err.(type) {
		case *etcd.EtcdError:
			if terr.ErrorCode == etcderr.EcodeKeyNotFound {
				return nil, nil
			}
			return nil, err
		default:
			return nil, err
		}
	}

	specs := make(map[string]machine.MachineSpec)

	for _, kv := range resp.Node.Nodes {
		_, bootID := path.Split(kv.Key)

		spec, err := r.GetMachineSpec(bootID)
		if err != nil {
			return nil, err
		}
		if spec != nil {
			specs[bootID] = *spec
		}
	}
	return specs, nil
}

// Get Machine object from etcd
func (r *Registry) GetMachineState(bootid string) *machine.MachineState {
	key := path.Join(keyPrefix, machinePrefix, bootid, "object")
	resp, err := r.etcd.Get(key, false, true)

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return nil
	}

	var mach machine.MachineState
	if err := unmarshal(resp.Node.Value, &mach); err != nil {
		return nil
	}

	return &mach
}

func (r *Registry) GetMachineSpec(bootID string) (*machine.MachineSpec, error) {
	key := path.Join(keyPrefix, machineSpecPrefix, bootID, "object")
	resp, err := r.etcd.Get(key, false, true)
	if err != nil {
		switch terr := err.(type) {
		case *etcd.EtcdError:
			if terr.ErrorCode == etcderr.EcodeKeyNotFound {
				return nil, nil
			}
			return nil, err
		default:
			return nil, err
		}
	}

	var spec machine.MachineSpec
	if err := unmarshal(resp.Node.Value, &spec); err != nil {
		return nil, err
	}
	return &spec, nil
}

// Push Machine object to etcd
func (r *Registry) SetMachineState(ms machine.MachineState, ttl time.Duration) (uint64, error) {
	//TODO: Handle the error generated by marshal
	json, _ := marshal(ms)
	key := path.Join(keyPrefix, machinePrefix, ms.BootID, "object")

	// Assume state is already present, returning on success
	resp, err := r.etcd.Update(key, json, uint64(ttl.Seconds()))
	if err == nil {
		return resp.Node.ModifiedIndex, nil
	}

	// If state was not present, explicitly create it so the other members
	// in the cluster know this is a new member
	resp, err = r.etcd.Create(key, json, uint64(ttl.Seconds()))
	if err != nil {
		return uint64(0), err
	}

	return resp.Node.ModifiedIndex, nil
}

func (r *Registry) SetMachineSpec(bootID string, spec machine.MachineSpec) error {
	json, err := marshal(spec)
	if err != nil {
		return err
	}

	key := path.Join(keyPrefix, machineSpecPrefix, bootID, "object")
	_, err = r.etcd.RawSet(key, json, 0)
	return err
}

// Remove Machine object from etcd
func (r *Registry) RemoveMachineState(machBootID string) error {
	key := path.Join(keyPrefix, machinePrefix, machBootID, "object")
	_, err := r.etcd.Delete(key, false)
	return err
}

// Attempt to acquire a lock on a given machine for a given amount of time
func (r *Registry) LockMachine(machBootID, context string) *TimedResourceMutex {
	return r.lockResource("machine", machBootID, context)
}

func (self *EventStream) filterEventMachineCreated(resp *etcd.Response) *event.Event {
	if base := path.Base(resp.Node.Key); base != "object" {
		return nil
	}

	if resp.Action != "create" {
		return nil
	}

	var m machine.MachineState
	unmarshal(resp.Node.Value, &m)
	return &event.Event{"EventMachineCreated", m, nil}
}

func (self *EventStream) filterEventMachineRemoved(resp *etcd.Response) *event.Event {
	if base := path.Base(resp.Node.Key); base != "object" {
		return nil
	}

	if resp.Action != "expire" && resp.Action != "delete" {
		return nil
	}

	machBootID := path.Base(path.Dir(resp.Node.Key))
	return &event.Event{"EventMachineRemoved", machBootID, nil}
}
