package registry

import (
	"path"
	"strings"
	"time"

	"github.com/coreos/fleet/third_party/github.com/coreos/go-etcd/etcd"

	"github.com/coreos/fleet/event"
	"github.com/coreos/fleet/machine"
)

const (
	machinePrefix = "machines"
)

// Describe all active Machines
func (r *FleetRegistry) GetActiveMachines() []machine.MachineState {
	key := path.Join(r.keyPrefix, machinePrefix)
	resp, err := r.storage.Get(key, false, true)

	var machines []machine.MachineState

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return machines
	}

	for _, kv := range resp.Node.Nodes {
		_, machID := path.Split(kv.Key)
		mach := r.GetMachineState(machID)
		if mach != nil {
			machines = append(machines, *mach)
		}
	}

	return machines
}

// Get Machine object from etcd
func (r *FleetRegistry) GetMachineState(machID string) *machine.MachineState {
	key := path.Join(r.keyPrefix, machinePrefix, machID, "object")
	resp, err := r.storage.Get(key, false, true)

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return nil
	}

	var mach machine.MachineState
	if err := unmarshal(resp.Node.Value, &mach); err != nil {
		return nil
	}

	return &mach
}

// Push Machine object to etcd
func (r *FleetRegistry) SetMachineState(ms machine.MachineState, ttl time.Duration) (uint64, error) {
	//TODO: Handle the error generated by marshal
	json, _ := marshal(ms)
	key := path.Join(r.keyPrefix, machinePrefix, ms.ID, "object")

	// Assume state is already present, returning on success
	resp, err := r.storage.Update(key, json, uint64(ttl.Seconds()))
	if err == nil {
		return resp.Node.ModifiedIndex, nil
	}

	// If state was not present, explicitly create it so the other members
	// in the cluster know this is a new member
	resp, err = r.storage.Create(key, json, uint64(ttl.Seconds()))
	if err != nil {
		return uint64(0), err
	}

	return resp.Node.ModifiedIndex, nil
}

// Remove Machine object from etcd
func (r *FleetRegistry) RemoveMachineState(machID string) error {
	key := path.Join(r.keyPrefix, machinePrefix, machID, "object")
	_, err := r.storage.Delete(key, false)
	return err
}

// Attempt to acquire a lock on a given machine for a given amount of time
func (r *FleetRegistry) LockMachine(machID, context string) *TimedResourceMutex {
	return r.lockResource("machine", machID, context)
}

func filterEventMachineCreated(resp *etcd.Response) *event.Event {
	dir, baseName := path.Split(resp.Node.Key)
	if baseName != "object" {
		return nil
	}

	dir = strings.TrimSuffix(dir, "/")
	dir = path.Dir(dir)
	prefixName := path.Base(dir)

	if prefixName != machinePrefix {
		return nil
	}

	if resp.Action != "create" {
		return nil
	}

	var m machine.MachineState
	unmarshal(resp.Node.Value, &m)
	return &event.Event{"EventMachineCreated", m, nil}
}

func filterEventMachineRemoved(resp *etcd.Response) *event.Event {
	dir, baseName := path.Split(resp.Node.Key)
	if baseName != "object" {
		return nil
	}

	dir = strings.TrimSuffix(dir, "/")
	dir = path.Dir(dir)
	prefixName := path.Base(dir)

	if prefixName != machinePrefix {
		return nil
	}

	if resp.Action != "expire" && resp.Action != "delete" {
		return nil
	}

	machID := path.Base(path.Dir(resp.Node.Key))
	return &event.Event{"EventMachineRemoved", machID, nil}
}
